#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jun  8 17:40:57 2020

@author: davidr.mckenna
"""


import numpy as np
import pandas as pd
import datetime as dt
import matplotlib.pyplot as plt
import seaborn as sns
import requests, json
import matplotlib.dates as mdates
from matplotlib.dates import DateFormatter
from sklearn.linear_model import LinearRegression
import warnings
warnings.filterwarnings('ignore')

#%%

    ### Import the latest data ###
 
# The data is imported from the covidtracking.com website. 

url = 'https://covidtracking.com/api/v1/states/daily.json'

r = requests.get(url)

json_data = r.json()

df = pd.json_normalize(json_data)

# Add columns Deaths per Positive case (DperP), Positive per Test (PosPerTest),
# and Total Increase Minus Hosptialized Increase (TotMinusHosptializedIncresase)

df['DperP'] = df['death']/df['positive']
df['PosPerTest']= df['positiveIncrease']/df['totalTestResultsIncrease']
df['TotMinusHosptializedIncresase'] = np.abs(df['positiveIncrease'] - df['hospitalizedIncrease'])

df['Date'] = pd.to_datetime(df['date'].astype(str), infer_datetime_format=True)

UT = df[df['state']=='UT']

print(UT.Date.dtype)

fig,ax = plt.subplots()

ax.bar(UT['Date'], UT.positiveIncrease)

# Define the date format
date_form = DateFormatter("%m-%d")
ax.xaxis.set_major_formatter(date_form)

# Ensure a major tick for each week using (interval=1) 
ax.xaxis.set_major_locator(mdates.WeekdayLocator(interval=2))



plt.show()

#%%

fc = df[df['state'].isin(['UT','AZ','CO','NM'])]

fig,ax = plt.subplots()

fig = fc.groupby(['Date','state']).sum()['death'].unstack().plot(ax=ax)
#plt.plot(fc['Date'],fc[fc['state']=='NM']['positiveIncrease'])
#plt.plot(fc['Date'],fc[fc['state']=='CO']['positiveIncrease'])
#plt.plot(fc['Date'],fc[fc['state']=='AZ']['positiveIncrease'])
       

# Define the date format
date_form = DateFormatter("%m-%d")
ax.xaxis.set_major_formatter(date_form)

# Ensure a major tick for each week using (interval=1) 
ax.xaxis.set_major_locator(mdates.DayLocator(interval=7))
plt.xticks(rotation=30)

plt.show()







